FROM node:20-alpine AS deps

# Install packages needed for build
RUN apk add --no-cache python3 make g++ build-base openssl-dev

WORKDIR /app

# Install dependencies without running postinstall scripts
COPY package.json package-lock.json* ./
RUN npm ci --ignore-scripts

# Rebuild the source code only when needed
FROM node:20-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Add build dependencies for Alpine
RUN apk add --no-cache python3 make g++ build-base openssl-dev

# Next.js collects anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
ENV NEXT_TELEMETRY_DISABLED 1

# Now generate Prisma client after the schema has been copied
RUN npx prisma generate

# Rebuild bcrypt for Alpine
RUN npm rebuild bcrypt --build-from-source

# Build Next.js app
RUN npm run build

# Production image, copy all the files and run next
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# Add runtime dependencies for bcrypt
RUN apk add --no-cache openssl

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Copy public folder
COPY --from=builder /app/public ./public

# Automatically leverage output traces to reduce image size
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy prisma schema and migration files
COPY --from=builder /app/prisma ./prisma

# Ensure prisma directory and files are writable by the nextjs user
RUN mkdir -p /app/prisma
RUN chown -R nextjs:nodejs /app/prisma

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# server.js is generated by next build
CMD ["node", "server.js"] 